# -*- coding: utf-8 -*-
"""B20CS076_PRML_Bonus_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yEBDBfUDybWXMV2G70JsWP3sgIw17uqn
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import seaborn as sns
from sklearn.preprocessing import Normalizer
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import ElasticNet
from sklearn.neighbors import KNeighborsRegressor
from sklearn.svm import SVR
from sklearn.tree import DecisionTreeRegressor

from google.colab import drive 
drive.mount('/content/drive')

"""# Importing the dataset"""

dataset = pd.read_csv('/content/drive/MyDrive/Flight_price_dataset.csv')
dataset.head()

"""#Data Visualization and Analysis && Preprocessing """

dataset.describe(include="all")

dataset['Airline'].value_counts()

plt.figure(figsize=(20,6))
sns.barplot(data=dataset , x='Airline',y='Price')
plt.xticks(rotation=45)
plt.show()

dataset=dataset[ dataset['Airline'] != 'Trujet']

dataset

labelencoder=LabelEncoder()
dataset['Airline']=labelencoder.fit_transform(dataset['Airline'])
dataset

dataset['Source'].value_counts()

dataset['Source'] = labelencoder.fit_transform(dataset['Source'])
dataset

dataset['Destination'].value_counts()

dataset['Destination']=labelencoder.fit_transform(dataset['Destination'])

plt.figure(figsize=(10,6))
sns.barplot(data=dataset ,  x='Total_Stops' , y='Price')
plt.show()

dataset['Total_Stops'] = labelencoder.fit_transform(dataset['Total_Stops'])
dataset

dataset['Additional_Info'].value_counts()

dataset['Additional_Info'] = dataset['Additional_Info'].replace('No Info','No info')
dataset['Additional_Info'] = dataset['Additional_Info'].replace(['2 long layover', '1 short layover' , 'Red-eye flight'],'Rare')
dataset['Additional_Info'].value_counts()

plt.figure(figsize=(25,5))
sns.barplot(data=dataset , x='Additional_Info' , y='Price')
plt.show()

dataset['Additional_Info']=labelencoder.fit_transform(dataset['Additional_Info'])
dataset

dataset['Duration'] = dataset['Duration'].str.replace('h','*60').str.replace(' ','+').str.replace('m','*1').apply(eval)

dataset

dataset['Date_of_Journey'] = pd.to_datetime(dataset['Date_of_Journey'])
dataset

dataset['weekday']=dataset['Date_of_Journey'].dt.day_name()

plt.figure(figsize=(12,6))
sns.barplot(data=dataset , x='weekday', y='Price')
plt.show()

dataset['weekday'] = labelencoder.fit_transform(dataset['weekday'])
dataset

dataset['Month'] = dataset['Date_of_Journey'].dt.month

plt.figure(figsize=(10,5))
sns.barplot(data=dataset , x='Month' , y='Price')
plt.show()

dataset['Month'] = labelencoder.fit_transform(dataset['Month'])
dataset

dataset.drop(columns = ['Date_of_Journey', 'Route' , 'Arrival_Time' , 'Dep_Time'], axis=1 ,inplace=True)
dataset

dataset=dataset[['Airline','Source','Destination','Duration','Total_Stops','Additional_Info','weekday','Month','Price']]
dataset

plt.figure(figsize=(16,6))
sns.heatmap(dataset.corr() , annot=True)
plt.show()

"""#Splitting the Dataset"""

data_arr = dataset.values
X = data_arr[ : , 0:8]
Y = data_arr[ : , 8]

"""Rescaling the data using a normalizer"""

normalizer=Normalizer()
rescaled_X=normalizer.fit_transform(X)
rescaled_X

X_train,X_test,Y_train,Y_test=train_test_split(rescaled_X,Y, test_size=0.3 ,random_state=1)
X_train

"""#Performance Evaluation on various models """

models = []
models.append(('LinearRegression',LinearRegression()))
models.append(('Lasso',Lasso()))
models.append(('RandomForestRegression',RandomForestRegressor()))
models.append(('ElasticNet',ElasticNet()))
models.append(('KNearestNeighbours',KNeighborsRegressor()))
models.append(('SupportVectorMachines',SVR()))
models.append(('DecisonTreeRegression',DecisionTreeRegressor()))

names =  []
results = []

for name,model in models:
  model = model.fit(X_train,Y_train)
  accuracy = model.score(X_test,Y_test)
  results.append(accuracy)
  names.append(name)
  print('%s:%f'%(name , accuracy*100))

from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score

array=[10,50,100,150,200]

for num_trees in array:
  max_features=5
  kfold = KFold(n_splits=10 , random_state = 7, shuffle = True)
  model_1 =RandomForestRegressor(n_estimators=num_trees, max_features=max_features)
  results = cross_val_score(model_1,X,Y,cv=kfold)
  print('num_trees : %f (%f)' %(num_trees,results.mean()*100))
  # On running the above randomTreeRegressor algorithm we found that accuracy is not much increased after 50 trees are been taken so this is quite good accuracy to have